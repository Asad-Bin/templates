#include<bits/stdc++.h>
using namespace std;

#define MAXLG   18
#define MAXN    100000
#define fi      first
#define se      second

const int inf = 1000000000;

int Plc[MAXLG+5][MAXN+10], stp;
int S[MAXN+10];                     //Sorted Suffixes. . . .
pair< pair<int,int> , int> L[MAXN+10];

void Generate_SA(string str)
{
    int i, len = str.size(), cur;
    for(i=0; i<len; i++)    Plc[0][i] = str[i];

    for(cur=stp=1; (cur>>1)<len; cur*=2, stp++)
    {
        for(i=0; i<len; i++)
        {
            L[i].fi.fi = Plc[stp-1][i];
            L[i].fi.se = i+cur<len ? Plc[stp-1][i+cur] : -inf; // set it to -inf when dealing with negative numbers
            L[i].se = i;
        }
        
        sort(L, L+len);
        
        for(i=0; i<len; i++)
        {
            if(!i || L[i-1].fi.fi != L[i].fi.fi || L[i-1].fi.se != L[i].fi.se) Plc[stp][L[i].se] = i;
            else Plc[stp][L[i].se] = Plc[stp][L[i-1].se];
        }
    }
    
    for(i = 0; i < len; i++)
        S[Plc[stp-1][i]] = i;
    stp--;
}

int lcp(int u, int v, int N) // Here N = length of the string **Call Generate_SA(string)**
{
	// Generates two longest equal substring starting from u and v. . . .
	
    int ret = 0, k;
    if(u == v) return N-u;
    for(k = stp; k >= 0 && u < N && v < N; k--)
        if(Plc[k][u] == Plc[k][v])
            ret += 1<<k, u += 1<<k, v += 1<<k;
    return ret;
}

string str;

int main()
{
	cin >> str;
	
    Generate_SA(str);
    for(int i = 0; i < (int) str.size(); i++){
        cout <<  S[i] << endl;
    }
    return 0;
}
